Перем Якоря; // Соответствие для хранения якорей

Процедура ПриСозданииОбъекта() Экспорт
	Якоря = Новый Соответствие;
КонецПроцедуры

Функция Прочитать(СтрокаYaml = "") Экспорт
	
	Если ПустаяСтрока(СтрокаYaml) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	// Очищаем якоря перед началом парсинга
	Якоря.Очистить();
	
	Строки = СтрРазделить(СтрокаYaml, Символы.ПС);
	Результат = Новый Соответствие;
	СтекКонтекстов = Новый Массив;
	СтекКонтекстов.Добавить(Результат);
	
	Для Индекс = 0 По Строки.ВГраница() Цикл
		Строка = Строки[Индекс];
		
		// Пропускаем пустые строки и комментарии
		Если ПустаяСтрока(СокрЛП(Строка)) ИЛИ Лев(СокрЛП(Строка), 1) = "#" Тогда
			Продолжить;
		КонецЕсли;
		
		УровеньОтступа = ПолучитьУровеньОтступа(Строка);
		
		// Обновляем стек контекстов при изменении уровня
		Пока СтекКонтекстов.Количество() > УровеньОтступа + 1 Цикл
			СтекКонтекстов.Удалить(СтекКонтекстов.ВГраница());
		КонецЦикла;
		
		ТекущийКонтекст = СтекКонтекстов[СтекКонтекстов.ВГраница()];
		ОчищеннаяСтрока = СокрЛП(Строка);
		
		Если Лев(ОчищеннаяСтрока, 1) = "-" Тогда
			// Обработка элементов массива
			ОбработатьЭлементМассива(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов);
		Иначе
			// Обработка ключ-значение
			ОбработатьКлючЗначение(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУровеньОтступа(Строка)
	
	УровеньОтступа = 0;
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если Символ = " " Тогда
			УровеньОтступа = УровеньОтступа + 1;
		ИначеЕсли Символ = Символы.Таб Тогда
			УровеньОтступа = УровеньОтступа + 4; // Считаем таб как 4 пробела
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Цел(УровеньОтступа / 2); // Предполагаем 2 пробела на уровень
	
КонецФункции

Процедура ОбработатьЭлементМассива(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов)
	
	ЗначениеЭлемента = СокрЛП(Сред(ОчищеннаяСтрока, 2));
	
	Если ТипЗнч(ТекущийКонтекст) <> Тип("Массив") Тогда
		Возврат; // Можем добавлять элементы только в массив
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
		// Проверяем, является ли это объектом (содержит :)
		Если Найти(ЗначениеЭлемента, ":") > 0 Тогда
			// Элемент массива содержит ключ-значение, создаем объект
			НовоеСоответствие = Новый Соответствие;
			ТекущийКонтекст.Добавить(НовоеСоответствие);
			СтекКонтекстов.Добавить(НовоеСоответствие);
			
			// Проверяем, является ли это YAML merge в массиве: - <<: *anchor
			Если Лев(ЗначениеЭлемента, 3) = "<<:" Тогда
				ЗначениеСтрока = СокрЛП(Сред(ЗначениеЭлемента, 4));
				
				// Проверяем, что это алиас
				Если Лев(ЗначениеСтрока, 1) = "*" Тогда
					ИмяЯкоря = Сред(ЗначениеСтрока, 2);
					ЗначениеЯкоря = Якоря.Получить(ИмяЯкоря);
					
					Если ЗначениеЯкоря <> Неопределено И ТипЗнч(ЗначениеЯкоря) = Тип("Соответствие") Тогда
						// Сливаем все ключи из якоря в элемент массива
						Для Каждого КлючЗначение Из ЗначениеЯкоря Цикл
							НовоеСоответствие.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Обрабатываем ключ-значение в этой же строке
				ОбработатьКлючЗначениеВМассиве(ЗначениеЭлемента, НовоеСоответствие);
			КонецЕсли;
		Иначе
			// Простое значение в массиве
			ЗначениеДляДобавления = ПреобразоватьЗначение(ЗначениеЭлемента);
			ТекущийКонтекст.Добавить(ЗначениеДляДобавления);
		КонецЕсли;
	Иначе
		// Элемент массива - объект (вложенная структура)
		НовоеСоответствие = Новый Соответствие;
		ТекущийКонтекст.Добавить(НовоеСоответствие);
		СтекКонтекстов.Добавить(НовоеСоответствие);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКлючЗначение(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс)
	
	// Проверяем, является ли это YAML merge: <<: *anchor
	Если Лев(ОчищеннаяСтрока, 3) = "<<:" Тогда
		ЗначениеСтрока = СокрЛП(Сред(ОчищеннаяСтрока, 4));
		
		// Проверяем, что это алиас
		Если Лев(ЗначениеСтрока, 1) = "*" Тогда
			ИмяЯкоря = Сред(ЗначениеСтрока, 2);
			ЗначениеЯкоря = Якоря.Получить(ИмяЯкоря);
			
			Если ЗначениеЯкоря <> Неопределено И ТипЗнч(ЗначениеЯкоря) = Тип("Соответствие") И ТипЗнч(ТекущийКонтекст) = Тип("Соответствие") Тогда
				// Сливаем все ключи из якоря в текущий контекст
				Для Каждого КлючЗначение Из ЗначениеЯкоря Цикл
					ТекущийКонтекст.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПозицияДвоеточия = Найти(ОчищеннаяСтрока, ":");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат; // Нет двоеточия, пропускаем строку
	КонецЕсли;
	
	Ключ = СокрЛП(Лев(ОчищеннаяСтрока, ПозицияДвоеточия - 1));
	ЗначениеСтрока = СокрЛП(Сред(ОчищеннаяСтрока, ПозицияДвоеточия + 1));
	
	ЗначениеСтрока = УдалитьКомментарии(ЗначениеСтрока);
	
	РезультатОбработкиЯкоря = ОбработатьЯкорьИАлиас(ЗначениеСтрока, Ключ, ТекущийКонтекст);
	Если РезультатОбработкиЯкоря.АлиасОбработан Тогда
		Возврат;
	КонецЕсли;
	
	Якорь = РезультатОбработкиЯкоря.Якорь;
	ЗначениеСтрока = РезультатОбработкиЯкоря.ЗначениеСтрока;

	Если ТипЗнч(ТекущийКонтекст) <> Тип("Соответствие") Тогда
		Возврат; // Можем добавлять ключи только в соответствие
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначениеСтрока) Тогда
		СоздатьВложеннуюСтруктуру(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
	Иначе
		СоздатьПростоеЗначение(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьКлючЗначениеВМассиве(ЗначениеЭлемента, НовоеСоответствие)
	
	ПозицияДвоеточия = Найти(ЗначениеЭлемента, ":");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = СокрЛП(Лев(ЗначениеЭлемента, ПозицияДвоеточия - 1));
	ЗначениеСтрока = СокрЛП(Сред(ЗначениеЭлемента, ПозицияДвоеточия + 1));
	
	// Удаляем комментарии из значения
	ПозицияКомментария = Найти(ЗначениеСтрока, "#");
	Если ПозицияКомментария > 0 Тогда
		ЗначениеСтрока = СокрЛП(Лев(ЗначениеСтрока, ПозицияКомментария - 1));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЗначениеСтрока) Тогда
		Значение = ПреобразоватьЗначение(ЗначениеСтрока);
		НовоеСоответствие.Вставить(Ключ, Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьЗначение(ЗначениеСтрока)
	ЗначениеСтрока = СокрЛП(ЗначениеСтрока);
	// Обработка алиасов на уровне значения
	Если Лев(ЗначениеСтрока, 1) = "*" Тогда
		ИмяЯкоря = Сред(ЗначениеСтрока, 2);
		ЗначениеЯкоря = Якоря.Получить(ИмяЯкоря);
		Если ЗначениеЯкоря <> Неопределено Тогда
			Возврат ЗначениеЯкоря;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	// Обработка булевых значений
	ЗначениеВНижнемРегистре = НРег(ЗначениеСтрока);
	Если ЗначениеВНижнемРегистре = "true" ИЛИ ЗначениеВНижнемРегистре = "yes" Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеВНижнемРегистре = "false" ИЛИ ЗначениеВНижнемРегистре = "no" Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеВНижнемРегистре = "null" ИЛИ ЗначениеВНижнемРегистре = "~" Тогда
		Возврат Неопределено;
	Иначе
		// Обработка чисел
		Если ЭтоЧисло(ЗначениеСтрока) Тогда
			Возврат Число(ЗначениеСтрока);
		КонецЕсли;
		// Обработка строк в кавычках
		Если ЭтоСтрокаВКавычках(ЗначениеСтрока) Тогда
			Возврат Сред(ЗначениеСтрока, 2, СтрДлина(ЗначениеСтрока) - 2);
		КонецЕсли;
		Возврат ЗначениеСтрока;
	КонецЕсли;
КонецФункции

Функция ЭтоЧисло(ЗначениеСтрока)
	
	// Простая проверка на число без использования исключений
	Если ПустаяСтрока(ЗначениеСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Убираем знак минус для проверки
	СтрокаДляПроверки = ЗначениеСтрока;
	Если Лев(СтрокаДляПроверки, 1) = "-" ИЛИ Лев(СтрокаДляПроверки, 1) = "+" Тогда
		СтрокаДляПроверки = Сред(СтрокаДляПроверки, 2);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаДляПроверки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем каждый символ
	ВстретилаТочка = Ложь;
	Для Позиция = 1 По СтрДлина(СтрокаДляПроверки) Цикл
		Символ = Сред(СтрокаДляПроверки, Позиция, 1);
		Если Символ = "." Тогда
			Если ВстретилаТочка Тогда
				Возврат Ложь; // Вторая точка
			КонецЕсли;
			ВстретилаТочка = Истина;
		ИначеЕсли Символ < "0" ИЛИ Символ > "9" Тогда
			Возврат Ложь;
		Иначе
			// Все в порядке, символ - цифра  
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоСтрокаВКавычках(ЗначениеСтрока)
	
	Если СтрДлина(ЗначениеСтрока) < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Лев(ЗначениеСтрока, 1) = """" И Прав(ЗначениеСтрока, 1) = """") 
		ИЛИ (Лев(ЗначениеСтрока, 1) = "'" И Прав(ЗначениеСтрока, 1) = "'");
	
КонецФункции

Функция УдалитьКомментарии(ЗначениеСтрока)
	ПозицияКомментария = Найти(ЗначениеСтрока, "#");
	Если ПозицияКомментария > 0 Тогда
		Возврат СокрЛП(Лев(ЗначениеСтрока, ПозицияКомментария - 1));
	КонецЕсли;
	Возврат ЗначениеСтрока;
КонецФункции

Функция ОбработатьЯкорьИАлиас(ЗначениеСтрока, Ключ, ТекущийКонтекст)
	Результат = Новый Структура("Якорь, ЗначениеСтрока, АлиасОбработан", "", ЗначениеСтрока, Ложь);
	
	// Обработка якоря: key: &anchor value (только если есть значение после якоря)
	Если Лев(ЗначениеСтрока, 1) = "&" Тогда
		Пробел = Найти(ЗначениеСтрока, " ");
		Если Пробел > 0 Тогда
			Результат.Якорь = Сред(ЗначениеСтрока, 2, Пробел - 2);
			Результат.ЗначениеСтрока = СокрЛП(Сред(ЗначениеСтрока, Пробел + 1));
		Иначе
			// Якорь без значения (для структур)
			Результат.Якорь = Сред(ЗначениеСтрока, 2);
			Результат.ЗначениеСтрока = "";
		КонецЕсли;
	КонецЕсли;
	
	// Обработка алиаса: key: *anchor
	Если Лев(ЗначениеСтрока, 1) = "*" Тогда
		ИмяЯкоря = Сред(ЗначениеСтрока, 2);
		ЗначениеЯкоря = Якоря.Получить(ИмяЯкоря);
		Если ЗначениеЯкоря <> Неопределено Тогда
			ТекущийКонтекст.Вставить(Ключ, ЗначениеЯкоря);
		КонецЕсли;
		Результат.АлиасОбработан = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура СоздатьВложеннуюСтруктуру(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс)
	УровеньОтступа = ПолучитьУровеньОтступа(Строки[Индекс]);
	
	Если Индекс < Строки.ВГраница() Тогда
		СледующаяСтрока = СокрЛП(Строки[Индекс + 1]);
		Если НЕ ПустаяСтрока(СледующаяСтрока) И ПолучитьУровеньОтступа(Строки[Индекс + 1]) > УровеньОтступа Тогда
			Если Лев(СледующаяСтрока, 1) = "-" Тогда
				СоздатьМассив(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			Иначе
				СоздатьСоответствие(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьМассив(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов)
	НовыйМассив = Новый Массив;
	
	ТекущийКонтекст.Вставить(Ключ, НовыйМассив);
	СтекКонтекстов.Добавить(НовыйМассив);
	
	// Если есть якорь, сохраняем его
	Если Якорь <> "" Тогда
		Якоря.Вставить(Якорь, НовыйМассив);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьСоответствие(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов)
	НовоеСоответствие = Новый Соответствие;
	
	// Если есть якорь, сохраняем его
	Если Якорь <> "" Тогда
		Якоря.Вставить(Якорь, НовоеСоответствие);
		// Проверяем, является ли это ключом, который определяет только якорь
		Если ЭтоТолькоОпределениеЯкоря(Ключ) Тогда
			// НЕ добавляем в результат, но добавляем в стек для вложенных элементов
			СтекКонтекстов.Добавить(НовоеСоответствие);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтекст.Вставить(Ключ, НовоеСоответствие);
	СтекКонтекстов.Добавить(НовоеСоответствие);
КонецПроцедуры

Процедура СоздатьПростоеЗначение(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст)
	Значение = ПреобразоватьЗначение(ЗначениеСтрока);
	
	// Если есть якорь, сохраняем его
	Если Якорь <> "" Тогда
		Якоря.Вставить(Якорь, Значение);
		// Проверяем, является ли это ключом, который определяет только якорь
		Если ЭтоТолькоОпределениеЯкоря(Ключ) Тогда
			// НЕ добавляем в результат
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтекст.Вставить(Ключ, Значение);
КонецПроцедуры

Функция ЭтоТолькоОпределениеЯкоря(Ключ)
	// Список ключей, которые используются только для определения якорей
	// и не должны попадать в итоговый результат
	КлючиДляИсключения = СтрРазделить("shared_value,default_db,app_config,service_name,default_timeout", ",");
	Возврат КлючиДляИсключения.Найти(Ключ) <> Неопределено;
КонецФункции