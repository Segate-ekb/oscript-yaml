#Использовать "../internal"

Процедура ПриСозданииОбъекта() Экспорт
	
	// Инициализация структур данных
	МенеджерЯкорей.Инициализировать();
КонецПроцедуры

// Основная функция для чтения YAML-строки
//
// Параметры:
//   СтрокаYaml - Строка - YAML-строка для парсинга
//
// Возвращаемое значение:
//   Произвольный - распарсенная структура данных или скалярное значение
//
Функция Прочитать(СтрокаYaml = "") Экспорт
	
	// Валидация входных данных
	Если НЕ ЗначениеЗаполнено(СтрокаYaml) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	// Проверим, содержит ли строка YAML только скалярное значение
	СтрокаБезПробелов = СокрЛП(СтрокаYaml);
	Если ЭтоСкалярноеЗначение(СтрокаБезПробелов) Тогда
		// Для скалярных значений, возвращаем напрямую преобразованное значение
		Возврат ПреобразовательЗначений.ПреобразоватьЗначение(СтрокаБезПробелов);
	КонецЕсли;
	
	// Проверка на массив верхнего уровня
	Если ЭтоМассивВерхнегоУровня(СтрокаYaml) Тогда
		Возврат ПреобразоватьМассивВерхнегоУровня(СтрокаYaml);
	КонецЕсли;
	
	// Подготовка к парсингу для сложных структур
	Возврат ВыполнитьОсновнойПарсинг(СтрокаYaml);
КонецФункции

// Проверяет, является ли YAML-строка скалярным значением
//
// Параметры:
//   СтрокаYaml - Строка - YAML-строка для проверки
//
// Возвращаемое значение:
//   Булево - Истина, если строка содержит только скалярное значение
//
Функция ЭтоСкалярноеЗначение(СтрокаYaml)
	Возврат СтрДлина(СтрокаYaml) > 0 
		И НЕ СтрНайти(СтрокаYaml, ":") > 0 
		И НЕ Лев(СтрокаYaml, 1) = "-" 
		И НЕ Лев(СтрокаYaml, 1) = "[";
КонецФункции

// Проверяет, является ли YAML-строка массивом верхнего уровня
//
// Параметры:
//   СтрокаYaml - Строка - YAML-строка для проверки
//
// Возвращаемое значение:
//   Булево - Истина, если строка содержит массив верхнего уровня
//
Функция ЭтоМассивВерхнегоУровня(СтрокаYaml)
	Строки = СтрРазделить(СтрокаYaml, Символы.ПС, Ложь);
	Для Каждого СтрокаЭлемент Из Строки Цикл
		ОчищеннаяСтрока = СокрЛП(СтрокаЭлемент);
		Если ПустаяСтрока(ОчищеннаяСтрока) ИЛИ СтрНачинаетсяС(ОчищеннаяСтрока, "#") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрНачинаетсяС(ОчищеннаяСтрока, "- ") И НЕ ОчищеннаяСтрока = "-" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строки.Количество() > 0;
КонецФункции

// Преобразует YAML-строку, содержащую массив верхнего уровня, в массив значений
//
// Параметры:
//   СтрокаYaml - Строка - YAML-строка для преобразования
//
// Возвращаемое значение:
//   Массив - массив преобразованных значений
//
Функция ПреобразоватьМассивВерхнегоУровня(СтрокаYaml)
	МассивРезультат = Новый Массив;
	Строки = СтрРазделить(СтрокаYaml, Символы.ПС, Ложь);
	
	Для Каждого СтрокаЭлемент Из Строки Цикл
		ОчищеннаяСтрока = СокрЛП(СтрокаЭлемент);
		Если ПустаяСтрока(ОчищеннаяСтрока) ИЛИ СтрНачинаетсяС(ОчищеннаяСтрока, "#") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеЭлемента = СокрЛП(Сред(ОчищеннаяСтрока, 2));
		МассивРезультат.Добавить(ПреобразовательЗначений.ПреобразоватьЗначение(ЗначениеЭлемента));
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

// Выполняет основной парсинг YAML для сложных структур
//
// Параметры:
//   СтрокаYaml - Строка - YAML-строка для парсинга
//
// Возвращаемое значение:
//   Соответствие - распарсенная структура данных
//
Функция ВыполнитьОсновнойПарсинг(СтрокаYaml)
	// Подготовка к парсингу
	ИнициализироватьПарсер();
	
	// Разбиваем строку на массив строк для основного парсинга
	Строки = СтрРазделить(СтрокаYaml, Символы.ПС);
	
	// Инициализация структур данных для парсинга
	Результат = Новый Соответствие;
	СтекКонтекстов = Новый Массив;
	СтекКонтекстов.Добавить(Результат);
	
	// Основной цикл парсинга
	Для Индекс = 0 По Строки.ВГраница() Цикл
		ОбработатьСтрокуYAML(Строки, Индекс, СтекКонтекстов);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Инициализация парсера перед началом работы
Процедура ИнициализироватьПарсер()
	МенеджерЯкорей.Очистить();
КонецПроцедуры

// Обработка одной строки YAML
//
// Параметры:
//   Строки - Массив - массив всех строк YAML
//   Индекс - Число - индекс текущей строки
//   СтекКонтекстов - Массив - стек контекстов парсинга
//
Процедура ОбработатьСтрокуYAML(Строки, Индекс, СтекКонтекстов)
	Строка = Строки[Индекс];
	
	// Пропускаем пустые строки и комментарии
	Если ПарсерУровней.ЭтоПустаяСтрокаИлиКомментарий(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем уровень отступа
	УровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строка);
	
	// Обновляем стек контекстов при изменении уровня
	ПарсерУровней.ОбновитьСтекКонтекстов(СтекКонтекстов, УровеньОтступа);
	
	// Получаем текущий контекст и очищенную строку
	ТекущийКонтекст = СтекКонтекстов[СтекКонтекстов.ВГраница()];
	ОчищеннаяСтрока = СокрЛП(Строка);
	
	// Определяем тип элемента и обрабатываем его
	Если ПарсерУровней.ЭтоЭлементМассива(ОчищеннаяСтрока) Тогда
		ПарсерМассивов.ОбработатьЭлементМассива(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей);
	Иначе
		ОбработатьКлючЗначение(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
	КонецЕсли;
КонецПроцедуры






// Обработка пары ключ-значение
//
// Параметры:
//   ОчищеннаяСтрока - Строка - очищенная строка с парой ключ-значение
//   ТекущийКонтекст - Соответствие - текущий контекст парсинга
//   СтекКонтекстов - Массив - стек контекстов
//   Строки - Массив - массив всех строк
//   Индекс - Число - текущий индекс строки
//
Процедура ОбработатьКлючЗначение(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс)
	// Проверяем, является ли это YAML merge
	Если ПарсерКлючЗначение.ЭтоYAMLMerge(ОчищеннаяСтрока) Тогда
		ПарсерКлючЗначение.ОбработатьYAMLMerge(ОчищеннаяСтрока, ТекущийКонтекст, МенеджерЯкорей);
		Возврат;
	КонецЕсли;
	
	// Разбираем строку на ключ и значение
	РезультатРазбора = ПарсерКлючЗначение.РазобратьКлючЗначение(ОчищеннаяСтрока);
	Если РезультатРазбора = Неопределено Тогда
		Возврат; // Некорректная строка
	КонецЕсли;
	
	// Проверяем, что текущий контекст - соответствие
	Если ТипЗнч(ТекущийКонтекст) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем якоря и алиасы
	РезультатОбработкиЯкоря = МенеджерЯкорей.ОбработатьЯкорьИАлиас(РезультатРазбора.Значение, РезультатРазбора.Ключ, ТекущийКонтекст);
	Если РезультатОбработкиЯкоря.АлиасОбработан Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем тип значения и обрабатываем соответственно
	ОбработатьЗначениеКлюча(
		РезультатРазбора.Ключ,
		РезультатОбработкиЯкоря.Якорь,
		РезультатОбработкиЯкоря.ЗначениеСтрока,
		ТекущийКонтекст,
		СтекКонтекстов,
		Строки,
		Индекс
	);
КонецПроцедуры



// Обработка значения ключа
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - значение
//   ТекущийКонтекст - Соответствие - текущий контекст
//   СтекКонтекстов - Массив - стек контекстов
//   Строки - Массив - массив строк
//   Индекс - Число - индекс строки
//
Процедура ОбработатьЗначениеКлюча(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс)
	Если ПустаяСтрока(ЗначениеСтрока) Тогда
		СоздатьВложеннуюСтруктуру(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
	ИначеЕсли ПарсерМногострочныхЛитералов.ЭтоМногострочныйЛитерал(ЗначениеСтрока) Тогда
		ОбработатьМногострочныйЛитерал(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс);
	Иначе
		СоздатьПростоеЗначение(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст);
	КонецЕсли;
КонецПроцедуры



// Преобразует строковое значение YAML в соответствующий тип 1С
//
// Параметры:
//   ЗначениеСтрока - Строка - значение для преобразования
//
// Возвращаемое значение:
//   Произвольный - значение, преобразованное в соответствующий тип
//
Функция ПреобразоватьЗначение(ЗначениеСтрока)
	ЗначениеСтрока = СокрЛП(ЗначениеСтрока);
	
	// Обработка алиасов на уровне значения
	Если Лев(ЗначениеСтрока, 1) = "*" Тогда
		Возврат МенеджерЯкорей.ПреобразоватьАлиас(ЗначениеСтрока);
	КонецЕсли;
	
	// Обработка flow style массивов и объектов
	ВложеннаяСтруктура = ПарсерПотоковыйСтиль.ПарсингFlowStyle(ЗначениеСтрока);
	Если ВложеннаяСтруктура <> Неопределено Тогда
		Возврат ВложеннаяСтруктура;
	КонецЕсли;
	
	// Остальное преобразование делегируем модулю
	Возврат ПреобразовательЗначений.ПреобразоватьЗначение(ЗначениеСтрока);
КонецФункции



Процедура СоздатьВложеннуюСтруктуру(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс)
	УровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	Если Индекс < Строки.ВГраница() Тогда
		СледующаяСтрока = СокрЛП(Строки[Индекс + 1]);
		Если НЕ ПустаяСтрока(СледующаяСтрока) И ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс + 1]) > УровеньОтступа Тогда
			Если Лев(СледующаяСтрока, 1) = "-" Тогда
				СоздатьМассив(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			Иначе
				СоздатьСоответствие(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьМассив(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов)
	НовыйМассив = Новый Массив;
	
	ТекущийКонтекст.Вставить(Ключ, НовыйМассив);
	СтекКонтекстов.Добавить(НовыйМассив);
	
	// Если есть якорь, сохраняем его
	МенеджерЯкорей.СохранитьЯкорь(Якорь, НовыйМассив);
КонецПроцедуры

Процедура СоздатьСоответствие(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов)
	НовоеСоответствие = Новый Соответствие;
	
	// Если есть якорь, сохраняем его
	Если Якорь <> "" Тогда
		МенеджерЯкорей.СохранитьЯкорь(Якорь, НовоеСоответствие);
		// Проверяем, является ли это ключом, который определяет только якорь
		Если МенеджерЯкорей.ЭтоТолькоОпределениеЯкоря(Ключ) Тогда
			// НЕ добавляем в результат, но добавляем в стек для вложенных элементов
			СтекКонтекстов.Добавить(НовоеСоответствие);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтекст.Вставить(Ключ, НовоеСоответствие);
	СтекКонтекстов.Добавить(НовоеСоответствие);
КонецПроцедуры

Процедура СоздатьПростоеЗначение(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст)
	Значение = ПреобразоватьЗначение(ЗначениеСтрока);
	
	МенеджерЯкорей.УстановитьЗначениеСЯкорем(Ключ, Якорь, Значение, ТекущийКонтекст);
КонецПроцедуры





// Обработка многострочного литерала
//
// Параметры:
//   Ключ - Строка - ключ для значения
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - индикатор типа литерала (| или >)
//   ТекущийКонтекст - Соответствие - текущий контекст
//   Строки - Массив - массив всех строк
//   Индекс - Число - индекс текущей строки
//
Процедура ОбработатьМногострочныйЛитерал(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс)
	ТипЛитерала = СокрЛП(ЗначениеСтрока);
	ТекущийУровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	МногострочноеЗначение = ПарсерМногострочныхЛитералов.СчитатьМногострочныйБлок(Строки, Индекс, ТекущийУровеньОтступа, ТипЛитерала);
	УстановитьЗначениеСЯкорем(Ключ, Якорь, МногострочноеЗначение, ТекущийКонтекст);
КонецПроцедуры











Процедура УстановитьЗначениеСЯкорем(Ключ, Якорь, МногострочноеЗначение, ТекущийКонтекст)
	МенеджерЯкорей.УстановитьЗначениеСЯкорем(Ключ, Якорь, МногострочноеЗначение, ТекущийКонтекст);
КонецПроцедуры










