// Модуль для обработки массивов в YAML

// Обработка элемента массива в YAML
//
// Параметры:
//   ОчищеннаяСтрока - Строка - очищенная строка с элементом массива
//   ТекущийКонтекст - Произвольный - текущий контекст парсинга
//   СтекКонтекстов - Массив - стек контекстов
//   МенеджерЯкорей - Объект - менеджер якорей
//   Строки - Массив - массив всех строк YAML
//   Индекс - Число - индекс текущей строки
//
// Возвращаемое значение:
//   Число - количество обработанных строк
//
Функция ОбработатьЭлементМассива(ОчищеннаяСтрока, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей, Строки, Индекс) Экспорт
	// Проверяем, что текущий контекст - массив
	Если ТипЗнч(ТекущийКонтекст) <> Тип("Массив") Тогда
		Возврат 1;
	КонецЕсли;
	
	// Извлекаем значение элемента (убираем дефис и пробелы)
	ЗначениеЭлемента = СокрЛП(Сред(ОчищеннаяСтрока, 2));
	
	Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
		Возврат ОбработатьЗначениеЭлементаМассива(ЗначениеЭлемента, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей, Строки, Индекс);
	Иначе
		// Элемент массива - пустой объект (вложенная структура)
		СоздатьВложенныйОбъектВМассиве(ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
		Возврат 1;
	КонецЕсли;
КонецФункции

// Обработка значения элемента массива
//
// Параметры:
//   ЗначениеЭлемента - Строка - значение элемента
//   ТекущийКонтекст - Массив - текущий массив
//   СтекКонтекстов - Массив - стек контекстов
//   МенеджерЯкорей - Объект - менеджер якорей
//   Строки - Массив - массив всех строк YAML
//   Индекс - Число - индекс текущей строки
//
// Возвращаемое значение:
//   Число - количество обработанных строк
//
Функция ОбработатьЗначениеЭлементаМассива(ЗначениеЭлемента, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей, Строки, Индекс) Экспорт
	// Проверяем, является ли это Flow style структурой
	ВложеннаяСтруктура = ПарсерПотоковыйСтиль.ПарсингFlowStyle(ЗначениеЭлемента);
	Если ВложеннаяСтруктура <> Неопределено Тогда
		ТекущийКонтекст.Добавить(ВложеннаяСтруктура);
		Возврат 1;
	КонецЕсли;
	
	// Проверяем, является ли это объектом (содержит :)
	Если ПарсерКлючЗначение.РазобратьКлючЗначение(ЗначениеЭлемента) <> Неопределено Тогда
		Возврат ОбработатьОбъектВМассиве(ЗначениеЭлемента, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей, Строки, Индекс);
	Иначе
		// Простое значение в массиве
		ЗначениеДляДобавления = ПреобразовательЗначений.ПреобразоватьЗначение(ЗначениеЭлемента);
		ТекущийКонтекст.Добавить(ЗначениеДляДобавления);
		Возврат 1;
	КонецЕсли;
КонецФункции

// Создание вложенного объекта в массиве
//
// Параметры:
//   ТекущийКонтекст - Массив - текущий массив
//   СтекКонтекстов - Массив - стек контекстов
//   Строки - Массив - массив всех строк YAML
//   Индекс - Число - индекс текущей строки
//
Процедура СоздатьВложенныйОбъектВМассиве(ТекущийКонтекст, СтекКонтекстов, Строки, Индекс) Экспорт
	УровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	Если Индекс < Строки.ВГраница() Тогда
		СледующаяСтрока = СокрЛП(Строки[Индекс + 1]);
		Если НЕ ПустаяСтрока(СледующаяСтрока) И ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс + 1]) > УровеньОтступа Тогда
			Если Лев(СледующаяСтрока, 1) = "-" Тогда
				// Следующий элемент - массив
				НовыйМассив = Новый Массив;
				ТекущийКонтекст.Добавить(НовыйМассив);
				СтекКонтекстов.Добавить(НовыйМассив);
			Иначе
				// Следующий элемент - соответствие
				НовоеСоответствие = Новый Соответствие;
				ТекущийКонтекст.Добавить(НовоеСоответствие);
				СтекКонтекстов.Добавить(НовоеСоответствие);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработка объекта в массиве
//
// Параметры:
//   ЗначениеЭлемента - Строка - значение элемента с объектом
//   ТекущийКонтекст - Массив - текущий массив
//   СтекКонтекстов - Массив - стек контекстов
//   МенеджерЯкорей - Объект - менеджер якорей
//   Строки - Массив - массив всех строк YAML
//   Индекс - Число - индекс текущей строки
//
// Возвращаемое значение:
//   Число - количество обработанных строк
//
Функция ОбработатьОбъектВМассиве(ЗначениеЭлемента, ТекущийКонтекст, СтекКонтекстов, МенеджерЯкорей, Строки, Индекс) Экспорт
	// Проверяем, является ли это YAML merge в массиве
	Если Лев(ЗначениеЭлемента, 3) = "<<:" Тогда
		НовоеСоответствие = Новый Соответствие;
		ТекущийКонтекст.Добавить(НовоеСоответствие);
		СтекКонтекстов.Добавить(НовоеСоответствие);
		ОбработатьMergeВМассиве(ЗначениеЭлемента, НовоеСоответствие, МенеджерЯкорей);
		Возврат 1;
	КонецЕсли;
	
	// Разбираем строку на ключ и значение
	РезультатРазбора = ПарсерКлючЗначение.РазобратьКлючЗначение(ЗначениеЭлемента);
	Если РезультатРазбора = Неопределено Тогда
		Возврат 1; // Некорректная строка
	КонецЕсли;
	
	// Обрабатываем якоря и алиасы
	РезультатОбработкиЯкоря = МенеджерЯкорей.ОбработатьЯкорьИАлиас(РезультатРазбора.Значение, РезультатРазбора.Ключ, Неопределено);
	Если РезультатОбработкиЯкоря.АлиасОбработан Тогда
		Возврат 1;
	КонецЕсли;
	
	// Создаем новое соответствие для объекта в массиве
	НовоеСоответствие = Новый Соответствие;
	ТекущийКонтекст.Добавить(НовоеСоответствие);
	СтекКонтекстов.Добавить(НовоеСоответствие);
	
	// Определяем тип значения и обрабатываем соответственно
	Возврат ОбработатьЗначениеКлючаВМассиве(
		РезультатРазбора.Ключ,
		РезультатОбработкиЯкоря.Якорь,
		РезультатОбработкиЯкоря.ЗначениеСтрока,
		НовоеСоответствие,
		СтекКонтекстов,
		Строки,
		Индекс
	);
КонецФункции

// Обработка значения ключа в массиве
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - значение
//   ТекущийКонтекст - Соответствие - текущий контекст
//   СтекКонтекстов - Массив - стек контекстов
//   Строки - Массив - массив строк
//   Индекс - Число - индекс строки
//
// Возвращаемое значение:
//   Число - количество обработанных строк
//
Функция ОбработатьЗначениеКлючаВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс) Экспорт
	Если ПустаяСтрока(ЗначениеСтрока) Тогда
		СоздатьВложеннуюСтруктуруВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс);
		Возврат 1;
	ИначеЕсли ПарсерМногострочныхЛитералов.ЭтоМногострочныйЛитерал(ЗначениеСтрока) Тогда
		ОбработатьМногострочныйЛитералВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс);
		Возврат 1;
	ИначеЕсли ПарсерПотоковыйСтиль.ЭтоНачалоМногострочнойFlowСтруктуры(ЗначениеСтрока) И ЕстьСледующиеСтроки(Строки, Индекс) Тогда
		Возврат ОбработатьМногострочнуюFlowСтруктуруВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс);
	Иначе
		СоздатьПростоеЗначениеВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст);
		Возврат 1;
	КонецЕсли;
КонецФункции

// Создание вложенной структуры в массиве
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ТекущийКонтекст - Соответствие - текущий контекст
//   СтекКонтекстов - Массив - стек контекстов
//   Строки - Массив - массив строк
//   Индекс - Число - индекс строки
//
Процедура СоздатьВложеннуюСтруктуруВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов, Строки, Индекс) Экспорт
	УровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	Если Индекс < Строки.ВГраница() Тогда
		СледующаяСтрока = СокрЛП(Строки[Индекс + 1]);
		Если НЕ ПустаяСтрока(СледующаяСтрока) И ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс + 1]) > УровеньОтступа Тогда
			Если Лев(СледующаяСтрока, 1) = "-" Тогда
				СоздатьМассивВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			Иначе
				СоздатьСоответствиеВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Создание массива в массиве
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ТекущийКонтекст - Соответствие - текущий контекст
//   СтекКонтекстов - Массив - стек контекстов
//
Процедура СоздатьМассивВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов) Экспорт
	НовыйМассив = Новый Массив;
	
	ТекущийКонтекст.Вставить(Ключ, НовыйМассив);
	СтекКонтекстов.Добавить(НовыйМассив);
	
	// Если есть якорь, сохраняем его
	МенеджерЯкорей.СохранитьЯкорь(Якорь, НовыйМассив);
КонецПроцедуры

// Создание соответствия в массиве
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ТекущийКонтекст - Соответствие - текущий контекст
//   СтекКонтекстов - Массив - стек контекстов
//
Процедура СоздатьСоответствиеВМассиве(Ключ, Якорь, ТекущийКонтекст, СтекКонтекстов) Экспорт
	НовоеСоответствие = Новый Соответствие;
	
	// Если есть якорь, сохраняем его
	Если Якорь <> "" Тогда
		МенеджерЯкорей.СохранитьЯкорь(Якорь, НовоеСоответствие);
		// Проверяем, является ли это ключом, который определяет только якорь
		Если МенеджерЯкорей.ЭтоТолькоОпределениеЯкоря(Ключ) Тогда
			// НЕ добавляем в результат, но добавляем в стек для вложенных элементов
			СтекКонтекстов.Добавить(НовоеСоответствие);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтекст.Вставить(Ключ, НовоеСоответствие);
	
	// ВАЖНО: Удаляем текущий контекст из стека и добавляем новое соответствие
	// Это нужно для того, чтобы следующие строки с большим отступом обрабатывались
	// в контексте нового соответствия, а не в контексте объекта массива
	СтекКонтекстов.Удалить(СтекКонтекстов.ВГраница());
	СтекКонтекстов.Добавить(НовоеСоответствие);
КонецПроцедуры

// Создание простого значения в массиве
//
// Параметры:
//   Ключ - Строка - ключ
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - значение
//   ТекущийКонтекст - Соответствие - текущий контекст
//
Процедура СоздатьПростоеЗначениеВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст) Экспорт
	Значение = ПреобразоватьЗначениеВМассиве(ЗначениеСтрока);
	
	МенеджерЯкорей.УстановитьЗначениеСЯкорем(Ключ, Якорь, Значение, ТекущийКонтекст);
КонецПроцедуры

// Преобразование значения в массиве
//
// Параметры:
//   ЗначениеСтрока - Строка - значение для преобразования
//
// Возвращаемое значение:
//   Произвольный - значение, преобразованное в соответствующий тип
//
Функция ПреобразоватьЗначениеВМассиве(ЗначениеСтрока) Экспорт
	ЗначениеСтрока = СокрЛП(ЗначениеСтрока);
	
	// Обработка алиасов на уровне значения
	Если Лев(ЗначениеСтрока, 1) = "*" Тогда
		Возврат МенеджерЯкорей.ПреобразоватьАлиас(ЗначениеСтрока);
	КонецЕсли;
	
	// Обработка flow style массивов и объектов
	ВложеннаяСтруктура = ПарсерПотоковыйСтиль.ПарсингFlowStyle(ЗначениеСтрока);
	Если ВложеннаяСтруктура <> Неопределено Тогда
		Возврат ВложеннаяСтруктура;
	КонецЕсли;
	
	// Остальное преобразование делегируем модулю
	Возврат ПреобразовательЗначений.ПреобразоватьЗначение(ЗначениеСтрока);
КонецФункции

// Обработка многострочного литерала в массиве
//
// Параметры:
//   Ключ - Строка - ключ для значения
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - индикатор типа литерала (| или >)
//   ТекущийКонтекст - Соответствие - текущий контекст
//   Строки - Массив - массив всех строк
//   Индекс - Число - индекс текущей строки
//
Процедура ОбработатьМногострочныйЛитералВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс) Экспорт
	ТипЛитерала = СокрЛП(ЗначениеСтрока);
	ТекущийУровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	МногострочноеЗначение = ПарсерМногострочныхЛитералов.СчитатьМногострочныйБлок(Строки, Индекс, ТекущийУровеньОтступа, ТипЛитерала);
	МенеджерЯкорей.УстановитьЗначениеСЯкорем(Ключ, Якорь, МногострочноеЗначение, ТекущийКонтекст);
КонецПроцедуры

// Обработка многострочной flow структуры в массиве
//
// Параметры:
//   Ключ - Строка - ключ для значения
//   Якорь - Строка - якорь (если есть)
//   ЗначениеСтрока - Строка - начало flow структуры
//   ТекущийКонтекст - Соответствие - текущий контекст
//   Строки - Массив - массив всех строк
//   Индекс - Число - индекс текущей строки
//
// Возвращаемое значение:
//   Число - количество обработанных строк
//
Функция ОбработатьМногострочнуюFlowСтруктуруВМассиве(Ключ, Якорь, ЗначениеСтрока, ТекущийКонтекст, Строки, Индекс) Экспорт
	ТекущийУровеньОтступа = ПарсерУровней.ПолучитьУровеньОтступа(Строки[Индекс]);
	
	// Проверяем, что это действительно начало flow структуры
	Если НЕ ПарсерПотоковыйСтиль.ЭтоНачалоМногострочнойFlowСтруктуры(ЗначениеСтрока) Тогда
		ВызватьИсключение "Некорректный вызов обработки многострочной flow структуры";
	КонецЕсли;
	
	// Создаем новый массив строк, где первая строка содержит только значение
	МодифицированныеСтроки = Новый Массив;
	Для Инд = 0 По Строки.ВГраница() Цикл
		Если Инд = Индекс Тогда
			МодифицированныеСтроки.Добавить(ЗначениеСтрока); // Только значение без ключа
		Иначе
			МодифицированныеСтроки.Добавить(Строки[Инд]);
		КонецЕсли;
	КонецЦикла;
	
	РезультатСбора = ПарсерПотоковыйСтиль.СобратьМногострочнуюFlowСтруктуру(МодифицированныеСтроки, Индекс, ТекущийУровеньОтступа);
	
	// Парсим собранную строку как обычную flow структуру
	Значение = ПреобразоватьЗначениеВМассиве(РезультатСбора.Строка);
	
	МенеджерЯкорей.УстановитьЗначениеСЯкорем(Ключ, Якорь, Значение, ТекущийКонтекст);
	
	Возврат РезультатСбора.КоличествоОбработанныхСтрок;
КонецФункции

// Проверяет, есть ли следующие строки для обработки многострочной flow структуры
//
// Параметры:
//   Строки - Массив - массив всех строк
//   Индекс - Число - текущий индекс строки
//
// Возвращаемое значение:
//   Булево - Истина, если есть следующие строки
//
Функция ЕстьСледующиеСтроки(Строки, Индекс) Экспорт
	Возврат Индекс < Строки.ВГраница();
КонецФункции

// Обработка YAML merge в массиве
//
// Параметры:
//   ЗначениеЭлемента - Строка - значение с merge
//   НовоеСоответствие - Соответствие - целевое соответствие
//   МенеджерЯкорей - Объект - менеджер якорей
//
Процедура ОбработатьMergeВМассиве(ЗначениеЭлемента, НовоеСоответствие, МенеджерЯкорей) Экспорт
	ЗначениеСтрока = СокрЛП(Сред(ЗначениеЭлемента, 4));
	
	Если Лев(ЗначениеСтрока, 1) = "*" Тогда
		ИмяЯкоря = Сред(ЗначениеСтрока, 2);
		ЗначениеЯкоря = МенеджерЯкорей.ПолучитьЗначениеЯкоря(ИмяЯкоря);
		
		Если ЗначениеЯкоря <> Неопределено И ТипЗнч(ЗначениеЯкоря) = Тип("Соответствие") Тогда
			ПарсерКлючЗначение.СлитьСоответствия(ЗначениеЯкоря, НовоеСоответствие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


