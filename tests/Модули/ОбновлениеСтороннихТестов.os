#Использовать 1connector
#Использовать fs
#Использовать logos

Перем Логгер;


Функция ПолучитьТегиСДанными(АдресРепозитория)
	
	Логгер.Информация("Получение тегов с данными из репозитория: %1", АдресРепозитория);

	Адрес = СтрШаблон("https://api.github.com/repos/%1/tags", АдресРепозитория);
	ТегиРепозитория = КоннекторHTTP.Get(Адрес).Json();

	ТегиСДанными = Новый ТаблицаЗначений();
	ТегиСДанными.Колонки.Добавить("Имя");
	ТегиСДанными.Колонки.Добавить("Адрес");

	Для каждого ТегИсточника Из ТегиРепозитория Цикл
		Если Не СтрНачинаетсяС(ТегИсточника["name"], "data-") Тогда
			Продолжить;
		КонецЕсли;

		Тег = ТегиСДанными.Добавить();
		Тег.Имя = ТегИсточника["name"];
		Тег.Адрес = ТегИсточника["zipball_url"];
	КонецЦикла;

	ТегиСДанными.Сортировать("Имя");

	Логгер.Отладка("Получены теги с данными: %1",
		СтрСоединить(ТегиСДанными.ВыгрузитьКолонку("Имя"), ", "));

	Возврат ТегиСДанными;

КонецФункции

Функция ПутьККаталогуТестов()

	Возврат ОбъединитьПути("tests", "fixtures", "yaml-test-suite");

КонецФункции

Функция ПутьКФайлуСостояния()

	Возврат ОбъединитьПути(ПутьККаталогуТестов(), "state.txt");

КонецФункции

Функция ПолучитьПоследнееСостояниеТестов()

	ПутьКФайлу = ПутьКФайлуСостояния();
	Если Не ФС.ФайлСуществует(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	ПоследнееСостояние = СокрЛП(ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();

	Логгер.Информация("Получено последнее состояние тестов: %1", ПоследнееСостояние);

	Возврат ПоследнееСостояние;

КонецФункции

Процедура ЗаписатьСостояниеТестов(Состояние)

	ПутьКФайлу = ПутьКФайлуСостояния();

	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу, "UTF-8");
	ЗаписьТекста.Записать(Состояние);
	ЗаписьТекста.Закрыть();

	Логгер.Информация("Обновлено состояние тестов: %1", Состояние);

КонецПроцедуры

Процедура ПолучитьИРаспаковатьАрхив(ЦелевойКаталог, АдресАрхива)
	
	Логгер.Информация("Получение архива с тестами: %1", АдресАрхива);

	ДанныеАрхива = КоннекторHTTP.Get(АдресАрхива).ДвоичныеДанные();
	ПотокДанныхАрхива = ДанныеАрхива.ОткрытьПотокДляЧтения();

	Логгер.Информация("Распаковка архива в каталог: %1", ЦелевойКаталог);

	ЧтениеZipФайла = Новый ЧтениеZipФайла(ПотокДанныхАрхива);
	ЧтениеZipФайла.ИзвлечьВсе(ЦелевойКаталог);
	ЧтениеZipФайла.Закрыть();

	ПотокДанныхАрхива.Закрыть();

	Логгер.Информация("Удаление вложенного корневого каталога");

	ВложенныйКаталог = НайтиФайлы(ЦелевойКаталог, "", Ложь)[0].ПолноеИмя;
	ФС.КопироватьСодержимоеКаталога(ВложенныйКаталог, ЦелевойКаталог);
	ФС.УдалитьФайлы(ВложенныйКаталог, , Истина);
	УдалитьФайлы(ВложенныйКаталог);

КонецПроцедуры

Процедура УдалитьНеактуальныеФайлы(Каталог)

	Логгер.Информация("Удаление неактуальных файлов в каталоге: %1", Каталог);

	Маски = Новый Массив;
	Маски.Добавить("out.yaml");
	Маски.Добавить("test.event");
	Маски.Добавить("emit.yaml");

	Для каждого Маска Из Маски Цикл
		ФС.УдалитьФайлы(Каталог, Маска, Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьСкрипт()
	
	Логгер = Логирование.ПолучитьЛог("oscript.app.yaml-test-suite");
	Логгер.УстановитьУровень(УровниЛога.Информация);

	АдресРепозитория = "yaml/yaml-test-suite";

	Теги = ПолучитьТегиСДанными(АдресРепозитория);
	АктуальныйТег = Теги[Теги.Количество() - 1];

	ИмяПоследнегоТега = ПолучитьПоследнееСостояниеТестов();
	Если ИмяПоследнегоТега = АктуальныйТег.Имя Тогда
		Логгер.Информация("Тесты уже обновлены до актуального состояния: %1", АктуальныйТег.Имя);
		ЗавершитьРаботу(0);
	КонецЕсли;

	КаталогДляРаспаковки = ПутьККаталогуТестов();
	ФС.ОбеспечитьПустойКаталог(КаталогДляРаспаковки);
	ПолучитьИРаспаковатьАрхив(КаталогДляРаспаковки, АктуальныйТег.Адрес);
	УдалитьНеактуальныеФайлы(КаталогДляРаспаковки);

	ЗаписатьСостояниеТестов(АктуальныйТег.Имя);

КонецПроцедуры

Если АргументыКоманднойСтроки.Количество() > 0
	И АргументыКоманднойСтроки[0] = "execute" Тогда
	
	ВыполнитьСкрипт();

КонецЕсли;
