// Тесты для проверки производительности сериализации YAML

#Использовать ".."
#Использовать asserts

&ТестовыйНабор
Процедура ПриСозданииОбъекта() Экспорт
    // Инициализация
КонецПроцедуры

&Тест
Процедура ТестПроизводительностиСериализацииБольшогоОбъема() Экспорт
    // Дано
    Парсер = Новый ПарсерYaml();
    
    // Создаем большую структуру данных
    БольшаяСтруктура = СоздатьБольшуюСтруктуру(10);
    
    // Когда
    НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    СтрокаYaml = Парсер.ЗаписатьYaml(БольшаяСтруктура);
    КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    ВремяВыполнения = КонецЗамера - НачалоЗамера;
    
    // Тогда
    Ожидаем.Что(СтрокаYaml).Не_().ЭтоНеопределено();
    Ожидаем.Что(ВремяВыполнения).Меньше(5000); // Должно выполняться менее 5 секунд
    
    // Проверяем, что результат содержит ожидаемое количество элементов
    Ожидаем.Что(СтрДлина(СтрокаYaml)).Больше(100);
КонецПроцедуры

&Тест
Процедура ТестПроизводительностиСериализацииВложенныхСтруктур() Экспорт
    // Дано
    Парсер = Новый ПарсерYaml();
    
    // Создаем глубоко вложенную структуру
    ГлубокаяСтруктура = СоздатьГлубокоВложеннуюСтруктуру(5);
    
    // Когда
    НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    СтрокаYaml = Парсер.ЗаписатьYaml(ГлубокаяСтруктура);
    КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    ВремяВыполнения = КонецЗамера - НачалоЗамера;
    
    // Тогда
    Ожидаем.Что(СтрокаYaml).Не_().ЭтоНеопределено();
    Ожидаем.Что(ВремяВыполнения).Меньше(1000); // Должно выполняться менее 1 секунды
    
    // Проверяем, что результат содержит ожидаемое количество отступов
    Ожидаем.Что(СтрНайти(СтрокаYaml, "        ")).Больше(0); // Проверка на наличие отступов (5 уровней)
КонецПроцедуры

&Тест
Процедура ТестПроизводительностиСериализацииСпециальныхСимволов() Экспорт
    // Дано
    Парсер = Новый ПарсерYaml();
    
    // Создаем строку со спецсимволами
    СтрокаСоСпецсимволами = "Строка с символами: " + Символ(9) + " табуляция, " + Символ(10) + " перевод строки, " + Символ(13) + " возврат каретки, " + Символ(34) + " кавычки";
    
    // Когда
    НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    Результат = Парсер.ЗаписатьYaml(СтрокаСоСпецсимволами);
    КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    // Тогда
    Ожидаем.Что(Результат).Не_().ЭтоНеопределено();
    
    // Проверяем наличие специальных символов в результате
    Ожидаем.Что(СтрДлина(Результат)).Больше(20);
КонецПроцедуры

// Вспомогательные функции

// Создает большую структуру данных для тестирования производительности
Функция СоздатьБольшуюСтруктуру(Размер)
    Результат = Новый Структура;
    
    Для Индекс = 1 По Размер Цикл
        ИмяКлюча = "ключ" + Индекс;
        
        Если Индекс % 3 = 0 Тогда
            // Создаем вложенную структуру
            ВложеннаяСтруктура = Новый Структура;
            Для ВложенныйИндекс = 1 По 5 Цикл
                ВложеннаяСтруктура.Вставить("вложенный" + ВложенныйИндекс, "значение" + ВложенныйИндекс);
            КонецЦикла;
            Результат.Вставить(ИмяКлюча, ВложеннаяСтруктура);
        ИначеЕсли Индекс % 3 = 1 Тогда
            // Создаем массив
            МассивЗначений = Новый Массив;
            Для ВложенныйИндекс = 1 По 5 Цикл
                МассивЗначений.Добавить("элемент" + ВложенныйИндекс);
            КонецЦикла;
            Результат.Вставить(ИмяКлюча, МассивЗначений);
        Иначе
            // Простое значение
            Результат.Вставить(ИмяКлюча, "значение" + Индекс);
        КонецЕсли;
    КонецЦикла;
    
    Возврат Результат;
КонецФункции

// Создает глубоко вложенную структуру для тестирования производительности
Функция СоздатьГлубокоВложеннуюСтруктуру(ГлубинаВложенности)
    ТекущаяСтруктура = Новый Структура;
    
    Если ГлубинаВложенности <= 0 Тогда
        ТекущаяСтруктура.Вставить("конечный_уровень", "достигнут");
        Возврат ТекущаяСтруктура;
    КонецЕсли;
    
    ТекущаяСтруктура.Вставить("уровень", ГлубинаВложенности);
    ТекущаяСтруктура.Вставить("вложенный", СоздатьГлубокоВложеннуюСтруктуру(ГлубинаВложенности - 1));
    
    Возврат ТекущаяСтруктура;
КонецФункции
