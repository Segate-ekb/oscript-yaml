#Использовать asserts
#Использовать collectionos
#Использовать fs
#Использовать ".."
#Использовать "."


Перем ПутьКТестовымДанным;
Перем ТестовыеДанные;
Перем ИмяТега;


&ТестовыйНабор(Характер = "Одиночка")
Процедура ПриСозданииОбъекта()

	// В качестве источника тестов используется:
	// https://github.com/yaml/yaml-test-suite.git

	ИмяТега = "alias"; // Имя Файла должно быть именем тега
    
	ПутьКТестовымДанным = ТестовыеУтилиты.ПолучитьПутьКТестовымДанным("yaml-test-suite");

	ТестовыеДанные = Новый ТаблицаЗначений();
	ТестовыеДанные.Колонки.Добавить("Каталог");
	ТестовыеДанные.Колонки.Добавить("Описание");

	ПропускаемыеКаталоги = ТестовыеУтилиты.ПрочитатьТекстФайла(
		ОбъединитьПути(ПутьКТестовымДанным, "not-implemented.txt")
	);

	// Ищем файлы в папке тегов для выбранного тега
	ПутьКТегу = ОбъединитьПути(ПутьКТестовымДанным, "tags", ИмяТега);
	
	Если НЕ ФС.КаталогСуществует(ПутьКТегу) Тогда
		ВызватьИсключение("Тег """ + ИмяТега + """ не найден в каталоге tags");
	КонецЕсли;

	НайденныеФайлыТегов = НайтиФайлы(ПутьКТегу, "*", Истина);
	Для Каждого ФайлТега Из НайденныеФайлыТегов Цикл
        Если ФайлТега.ЭтоКаталог() Тогда
            Продолжить;
        КонецЕсли;

		// Читаем путь к каталогу теста из файла тега
		ОтносительныйПутьКТесту = СокрЛП(ТестовыеУтилиты.ПрочитатьТекстФайла(ФайлТега.ПолноеИмя));
		ПутьККаталогуТеста = ОбъединитьПути(ПутьКТегу, ОтносительныйПутьКТесту);
		
		// Проверяем наличие файла описания теста
		ПутьКОписанию = ОбъединитьПути(ПутьККаталогуТеста, "===");
		Если ФС.ФайлСуществует(ПутьКОписанию) Тогда
			
			Каталог = ФС.ОтносительныйПуть(ПутьКТестовымДанным, ПутьККаталогуТеста);
			Описание = СокрЛП(ТестовыеУтилиты.ПрочитатьТекстФайла(ПутьКОписанию));
			Если Не СтрНайти(ПропускаемыеКаталоги, Каталог) Тогда
				// Добавляем только те каталоги, которые не помечены как "не реализовано"
				НоваяСтрока = ТестовыеДанные.Добавить();
				НоваяСтрока.Каталог = Каталог;
				НоваяСтрока.Описание = Описание;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&ПараметризованныйТест
&ИсточникВыражение("() -> КоллекцияТестовыхДанных()")
Процедура ВыполнитьТест(Каталог, Описание) Экспорт
	
	ПутьККаталогу = ОбъединитьПути(ПутьКТестовымДанным, Каталог);

	ПутьYAML = ОбъединитьПути(ПутьККаталогу, "in.yaml");
	СодержимоеYAML = ТестовыеУтилиты.ПрочитатьТекстФайла(ПутьYAML);
	ЧтениеYaml = ТестовыеУтилиты.СоздатьЭкземплярПарсера();

	РезультатYAML = ЧтениеYaml.ПрочитатьYaml(СодержимоеYAML);
	РезультатСтрокой = ДанныеВСтрокуJSON(РезультатYAML);

	ПутьКФайлуОшибки = ОбъединитьПути(ПутьККаталогу, "error");
	ПутьКФайлуJson = ОбъединитьПути(ПутьККаталогу, "in.json");
	Если ФС.ФайлСуществует(ПутьКФайлуОшибки) Тогда
		// Это ошибка
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СодержимоеYAML);

		Ожидаем.Что(ЧтениеYaml)
			.Метод("ПрочитатьYaml", МассивПараметров)
			.ВыбрасываетИсключение();

	ИначеЕсли ФС.ФайлСуществует(ПутьКФайлуJson) Тогда
		РезультатJSON = ПрочитатьJSONизФайла(ПутьКФайлуJson);
		ОбразецСтрокой = ДанныеВСтрокуJSON(РезультатJSON);

		Ожидаем.Что(РезультатСтрокой).Равно(ОбразецСтрокой);
	Иначе
		Возврат; // !TODO: Тут вообще было бы хорошо помечать тест как broken
	КонецЕсли;

КонецПроцедуры

Функция КоллекцияТестовыхДанных() Экспорт

	Возврат ПроцессорыКоллекций.ИзКоллекции(ТестовыеДанные)
		.Обработать("Элемент -> Списки.ИзЭлементов(Элемент.Каталог, Элемент.Описание)")
	;

КонецФункции

Функция ПрочитатьJSONизФайла(ПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции

Функция ДанныеВСтрокуJSON(Данные)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(
		ПереносСтрокJSON.Нет
	);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;

КонецФункции
