#Использовать asserts
#Использовать collectionos
#Использовать fs
#Использовать ".."
#Использовать "."


Перем ПутьКТестовымДанным;
Перем ТестовыеДанные;

Перем КатегорияДопустимыхДанных;
Перем КатегорияНедопустимыхДанных;
Перем КатегорияНереализованнойФункциональности;


&ТестовыйНабор(Характер = "Одиночка")
Процедура ПриСозданииОбъекта()

	// В качестве источника тестов используется:
	// https://github.com/yaml/yaml-test-suite.git

	ПутьКТестовымДанным = ТестовыеУтилиты.ПолучитьПутьКТестовымДанным("yaml-test-suite");

	ТестовыеДанные = Новый ТаблицаЗначений();
	ТестовыеДанные.Колонки.Добавить("Каталог");
	ТестовыеДанные.Колонки.Добавить("Описание");
	ТестовыеДанные.Колонки.Добавить("Категория");

	НайденныеФайлы = НайтиФайлы(ПутьКТестовымДанным, "===", Истина);
	Для Каждого Файл Из НайденныеФайлы Цикл

		НоваяСтрока = ТестовыеДанные.Добавить();
		НоваяСтрока.Каталог = ФС.ОтносительныйПуть(ПутьКТестовымДанным, Файл.Путь);
		НоваяСтрока.Описание = СокрЛП(ТестовыеУтилиты.ПрочитатьТекстФайла(Файл.ПолноеИмя));
		НоваяСтрока.Категория = КатегорияДопустимыхДанных;

		ПутьКФайлуОшибки = ОбъединитьПути(Файл.Путь, "error");
		Если ФС.ФайлСуществует(ПутьКФайлуОшибки) Тогда
			НоваяСтрока.Категория = КатегорияНедопустимыхДанных;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&ПараметризованныйТест
&ИсточникВыражение("() -> КоллекцияТестовыхДанныхКатегории(КатегорияДопустимыхДанных)")
Процедура ТестКорректногоYAML(Каталог, Описание) Экспорт
	
	ПутьККаталогу = ОбъединитьПути(ПутьКТестовымДанным, Каталог);

	ПутьYAML = ОбъединитьПути(ПутьККаталогу, "in.yaml");
	СодержимоеYAML = ТестовыеУтилиты.ПрочитатьТекстФайла(ПутьYAML);
	ЧтениеYaml = ТестовыеУтилиты.СоздатьЭкземплярПарсера();

	РезультатYAML = ЧтениеYaml.ПрочитатьYaml(СодержимоеYAML);
	РезультатСтрокой = ДанныеВСтрокуJSON(РезультатYAML);

	ПутьJSON = ОбъединитьПути(ПутьККаталогу, "in.json");
	Образец = ПрочитатьJSONизФайла(ПутьJSON);
	ОбразецСтрокой = ДанныеВСтрокуJSON(Образец);

	Ожидаем.Что(РезультатСтрокой).Равно(ОбразецСтрокой);

КонецПроцедуры

&ПараметризованныйТест
&ИсточникВыражение("() -> КоллекцияТестовыхДанныхКатегории(КатегорияНедопустимыхДанных)")
Процедура ТестНекорректногоYAML(Каталог, Описание) Экспорт
	
	ПутьККаталогу = ОбъединитьПути(ПутьКТестовымДанным, Каталог);

	ПутьYAML = ОбъединитьПути(ПутьККаталогу, "in.yaml");
	СодержимоеYAML = ТестовыеУтилиты.ПрочитатьТекстФайла(ПутьYAML);
	ЧтениеYaml = ТестовыеУтилиты.СоздатьЭкземплярПарсера();

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СодержимоеYAML);

	Ожидаем.Что(ЧтениеYaml)
		.Метод("ПрочитатьYaml", МассивПараметров)
		.ВыбрасываетИсключение();

КонецПроцедуры

Функция КоллекцияТестовыхДанныхКатегории(Категория) Экспорт

	Возврат ПроцессорыКоллекций.ИзКоллекции(ТестовыеДанные)
		.Фильтровать("Элемент -> Элемент.Категория = " + Строка(Категория))
		.Обработать("Элемент -> Списки.ИзЭлементов(Элемент.Каталог, Элемент.Описание)")
	;

КонецФункции

Функция ПрочитатьJSONизФайла(ПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции

Функция ДанныеВСтрокуJSON(Данные)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(
		ПереносСтрокJSON.Нет,
	);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;

КонецФункции


КатегорияДопустимыхДанных = 0;
КатегорияНедопустимыхДанных = 1;
КатегорияНереализованнойФункциональности = 2;
